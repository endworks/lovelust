name: Windows

on:
  push:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Flutter setup
        uses: subosito/flutter-action@main
        with:
          channel: "stable"
          cache: true

      - name: Disable telemetry
        run: flutter config --no-analytics

      - name: Install dependencies
        run: flutter pub get

      - name: Enable windows build
        run: flutter config --enable-windows-desktop

      - name: Test
        run: flutter test

      - name: Install 1Password CLI
        run: |
          $arch = (Get-CimInstance Win32_OperatingSystem).OSArchitecture
          switch ($arch) {
              '64-bit' { $opArch = 'amd64'; break }
              '32-bit' { $opArch = '386'; break }
              Default { Write-Error "Sorry, your operating system architecture '$arch' is unsupported" -ErrorAction Stop }
          }
          $installDir = Join-Path -Path $pwd -ChildPath 'op'
          Invoke-WebRequest -Uri "https://cache.agilebits.com/dist/1P/op2/pkg/v2.18.0/op_windows_$($opArch)_v2.18.0.zip" -OutFile op.zip
          Expand-Archive -Path op.zip -DestinationPath $installDir -Force
          Remove-Item -Path op.zip
          Copy-Item "$installDir/op.exe" -Destination "./"

      - name: Get secrets
        run: |
          "PARTNER_CENTER_TENANT_ID=$(./op.exe read "op://end.works/Microsoft Store Dev CLI/tennant id")" >> $env:GITHUB_ENV
          "PARTNER_CENTER_SELLER_ID=$(./op.exe read "op://end.works/Microsoft Store Dev CLI/seller id")" >> $env:GITHUB_ENV
          "PARTNER_CENTER_CLIENT_ID=$(./op.exe read "op://end.works/Microsoft Store Dev CLI/client id")" >> $env:GITHUB_ENV
          "PARTNER_CENTER_CLIENT_SECRET=$(./op.exe read "op://end.works/Microsoft Store Dev CLI/client secret")" >> $env:GITHUB_ENV
          ./op.exe read -o ./winstore.pfx "op://end.works/Microsoft Store Dev CLI/winstore.pfx"
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Get release name
        run: |
          "BUILD_VERSION=$(Get-Content pubspec.yaml | Select-String '^version:[^^]*' | ForEach-Object { $_.ToString().Split(":")[1].Split("+")[0].Trim() })" >> $env:GITHUB_ENV
          "COMMIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $env:GITHUB_ENV
          "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $env:GITHUB_ENV
          "COMMIT_NUMBER=$(git rev-list --count main)" >> $env:GITHUB_ENV
          "COMMIT_MESSAGE=$(git log -1 --pretty=%B)" >> $env:GITHUB_ENV

      - name: Get MSIX version number
        run: |
          "MSIX_VERSION=$env:BUILD_VERSION.0" >> $env:GITHUB_ENV

      - name: Refresh environment
        run: |
          Import-Module "$env:ChocolateyInstall/helpers/chocolateyInstaller.psm1"
          refreshenv

      - name: Build windows app
        run: flutter build windows --release --build-number=$env:COMMIT_NUMBER --obfuscate --split-debug-info=out/windows/

      - name: Upload MSIX artifact
        uses: actions/upload-artifact@main
        with:
          name: msix
          path: build/windows/runner/Release/*.msix

      - uses: microsoft/setup-msstore-cli@main

      - name: Configure the Microsoft Store CLI
        run: msstore reconfigure --tenantId $env:PARTNER_CENTER_TENANT_ID --sellerId $env:PARTNER_CENTER_SELLER_ID --clientId $env:PARTNER_CENTER_CLIENT_ID --clientSecret $env:PARTNER_CENTER_CLIENT_SECRET

      - name: Create MSIX
        run: msstore package --version $env:MSIX_VERSION

      - name: Upload MSIX artifact
        uses: actions/upload-artifact@main
        with:
          name: msix
          path: build/windows/runner/Release/*.msix

      # - run: msstore apps list

      # - name: Publish MSIX to the Microsoft Store
      #   run: msstore publish
