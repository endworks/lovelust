name: iOS

on:
  push:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: [self-hosted, macOS]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Flutter setup
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          architecture: x64
          cache: true

      - name: Disable telemetry
        run: flutter --disable-telemetry

      - name: Cache 1password-cli
        id: cache-op
        uses: actions/cache@v3
        env:
          cache-name: cache-op
        with:
          path: /usr/local/bin/op
          key: ${{ runner.os }}-build-${{ env.cache-name }}

      - if: ${{ steps.cache-op.outputs.cache-hit != 'true' }}
        name: Install 1Password CLI
        run: command -v op >/dev/null 2>&1 || { brew install --cask 1password/tap/1password-cli >&2; exit 1; }

      - name: Get secrets
        run: |
          export APPSTORE_API_KEY_ID=$(op read "op://end.works/App Store Connect API/app store api key id")
          export APPSTORE_API_PRIVATE_KEY_BASE64=$(op read "op://end.works/App Store Connect API/app store api private key")
          export APPSTORE_ISSUER_ID=$(op read "op://end.works/App Store Connect API/app store issuer id")
          export BUILD_CERTIFICATE_BASE64=$(op read "op://end.works/App Store Connect API/build certificate")
          export BUILD_CERTIFICATE_PRIVATE_KEY_BASE64=$(op read "op://end.works/App Store Connect API/build certificate private key")
          export P12_PASSWORD=$(op read "op://end.works/App Store Connect API/p12 password")
          export PROVISION_PROFILE_BASE64=$(op read "op://end.works/App Store Connect API/provision profile app store")
          export KEYCHAIN_PASSWORD=$(op read "op://end.works/App Store Connect API/keychain password")
          export CODE_SIGNING_IDENTITY=$(op read "op://end.works/App Store Connect API/code signing identity")
          export TEAM_ID=$(op read "op://end.works/App Store Connect API/team id")
          echo "APPSTORE_API_KEY_ID=$APPSTORE_API_KEY_ID" >> $GITHUB_ENV
          echo "APPSTORE_API_PRIVATE_KEY_BASE64=$APPSTORE_API_PRIVATE_KEY_BASE64" >> $GITHUB_ENV
          echo "APPSTORE_ISSUER_ID=$APPSTORE_ISSUER_ID" >> $GITHUB_ENV
          echo "BUILD_CERTIFICATE_BASE64=$BUILD_CERTIFICATE_BASE64" >> $GITHUB_ENV
          echo "BUILD_CERTIFICATE_PRIVATE_KEY_BASE64=$BUILD_CERTIFICATE_PRIVATE_KEY_BASE64" >> $GITHUB_ENV
          echo "P12_PASSWORD=$P12_PASSWORD" >> $GITHUB_ENV
          echo "PROVISION_PROFILE_BASE64=$PROVISION_PROFILE_BASE64" >> $GITHUB_ENV
          echo "KEYCHAIN_PASSWORD=$KEYCHAIN_PASSWORD" >> $GITHUB_ENV
          echo "CODE_SIGNING_IDENTITY=$CODE_SIGNING_IDENTITY" >> $GITHUB_ENV
          echo "TEAM_ID=$TEAM_ID" >> $GITHUB_ENV
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Get release name
        run: |
          echo "COMMIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "COMMIT_NUMBER=$(git rev-list --count main)" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$(git log -1 --pretty=%B)" >> $GITHUB_ENV

      - name: Generate release notes
        run: |
          WHATS_NEW="$COMMIT_HASH:$COMMIT_MESSAGE"
          echo "APP_STORE_CONNECT_WHATS_NEW=$WHATS_NEW" >> $GITHUB_ENV

      - name: Install the Codemagic CLI tools
        run: pip3 install codemagic-cli-tools

      - name: Set the environment variables
        run: |
          echo "APP_STORE_CONNECT_ISSUER_ID=${{ env.APPSTORE_ISSUER_ID }}" >> $GITHUB_ENV
          echo "APP_STORE_CONNECT_KEY_IDENTIFIER=${{ env.APPSTORE_API_KEY_ID }}" >> $GITHUB_ENV
          echo "CERTIFICATE_PRIVATE_KEY_PASSWORD=${{ env.P12_PASSWORD }}" >> $GITHUB_ENV

      - name: Import App Store Connect API private key
        run: |
          PRIVATE_KEYS_DIR=~/.private_keys
          mkdir -p $PRIVATE_KEYS_DIR
          PRIVATE_KEY_PATH=$PRIVATE_KEYS_DIR/AuthKey_"${{ env.APPSTORE_API_KEY_ID }}".p8
          echo -n "${{ env.APPSTORE_API_PRIVATE_KEY_BASE64 }}" | base64 --decode -o $PRIVATE_KEY_PATH
          echo "APP_STORE_CONNECT_PRIVATE_KEY=@file:$PRIVATE_KEY_PATH" >> $GITHUB_ENV

      - name: Get private key used to generate the certificate
        run: |
          CERTIFICATES_DIR=~/Library/MobileDevice/Certificates
          mkdir -p $CERTIFICATES_DIR
          CERTIFICATE_KEY_PATH=$CERTIFICATES_DIR/cert.key
          echo -n "${{ env.BUILD_CERTIFICATE_PRIVATE_KEY_BASE64 }}" | base64 --decode -o $CERTIFICATE_KEY_PATH
          echo "CERTIFICATE_PRIVATE_KEY=@file:$CERTIFICATE_KEY_PATH" >> $GITHUB_ENV

      - name: Set up a new temporary keychain
        run: keychain initialize

      - name: Set system default keychain
        run: keychain use-login

      - name: Fetch the code signing files from App Store Connect
        run: app-store-connect fetch-signing-files $(xcode-project detect-bundle-id) --type IOS_APP_STORE --create

      - name: Add the fetched certificates to keychain
        run: keychain add-certificates --certificate-password='${{ env.P12_PASSWORD }}'

      - name: Update the Xcode project settings to use fetched code signing profiles
        run: xcode-project use-profiles

      - name: Install Flutter dependencies
        run: flutter packages pub get

      - name: Install CocoaPods dependencies
        run: find . -name "Podfile" -execdir pod install \;

      - name: Upload Provisioning Profiles artifact
        uses: actions/upload-artifact@v3
        with:
          path: ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build the Flutter iOS project
        run: flutter build ipa --build-number=${{ env.COMMIT_NUMBER }} --obfuscate --split-debug-info=out/ios/ --export-options-plist=$HOME/export_options.plist

      - name: Publish the app to App Store Connect
        run: app-store-connect publish --path $(find $(pwd) -name "*.ipa")

      - name: Set system default keychain
        run: keychain use-login

      # - name: Install the Apple certificate and provisioning profile
      #   run: |
      #     # create variables
      #     CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
      #     PP_PATH=$RUNNER_TEMP/app_store_pp.mobileprovision
      #     KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
      #     API_KEY_PATH=$RUNNER_TEMP/AuthKey.p8

      #     # import certificate and provisioning profile from secrets
      #     echo -n "${{ env.BUILD_CERTIFICATE_BASE64 }}" | base64 --decode -o $CERTIFICATE_PATH
      #     echo -n "${{ env.PROVISION_PROFILE_BASE64 }}" | base64 --decode -o $PP_PATH
      #     echo -n "${{ env.PROVISION_PROFILE_AD_HOC_BASE64 }}" | base64 --decode -o $PPAH_PATH
      #     echo -n "${{ env.APPSTORE_API_PRIVATE_KEY_BASE64 }}" | base64 --decode -o $API_KEY_PATH

      #     # create temporary keychain
      #     security create-keychain -p "${{ env.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
      #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      #     security unlock-keychain -p "${{ env.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH

      #     # import certificate to keychain
      #     security import $CERTIFICATE_PATH -P "${{ env.P12_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      #     security list-keychain -d user -s $KEYCHAIN_PATH

      #     # apply provisioning profile
      #     PROVISIONING_PROFILES_DIR="~/Library/MobileDevice/Provisioning\ Profiles"
      #     mkdir -p "$PROVISIONING_PROFILES_DIR"

      #     UUID=`grep UUID -A1 -a "$PP_PATH" | grep -io "[-A-F0-9]\{36\}"`
      #     cp $PP_PATH "$PROVISIONING_PROFILES_DIR/$UUID.mobileprovision"
      #     ls -l "$PROVISIONING_PROFILES_DIR"

      #     # apply api key
      #     mkdir -p ~/.private_keys
      #     cp $API_KEY_PATH ~/.private_keys

      # - name: Build app-store app
      #   run: flutter build ipa --build-number=${{ env.COMMIT_NUMBER }} --verbose #--obfuscate --split-debug-info=out/ios/

      # - name: Upload artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     path: build/ios/ipa/*.ipa

      # - name: Validate app
      #   run: xcrun altool --validate-app -f build/ios/ipa/*.ipa --type ios --apiKey ${{ env.APPSTORE_API_KEY_ID }} --apiIssuer ${{ env.APPSTORE_ISSUER_ID }}

      # - name: Publish app
      #   run: xcrun altool --upload-app -f build/ios/ipa/*.ipa --type ios --apiKey ${{ env.APPSTORE_API_KEY_ID }} --apiIssuer ${{ env.APPSTORE_ISSUER_ID }}
