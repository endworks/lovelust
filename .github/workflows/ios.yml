name: iOS

on:
  push:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Flutter setup
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          architecture: x64
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Test
        run: flutter test

      - name: Install 1Password CLI
        run: |
          wget "https://cache.agilebits.com/dist/1P/op2/pkg/v2.18.0/op_linux_amd64_v2.18.0.zip" -O op.zip
          unzip -d op op.zip
          sudo mv op/op /usr/local/bin
          rm -r op.zip op

          op user get --me
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Get secrets
        run: |
          export APPSTORE_API_KEY_ID=$(op read "op://end.works/App Store Connect API/app store api key")
          export APPSTORE_API_PRIVATE_KEY=$(op read "op://end.works/App Store Connect API/app store private key")
          export APPSTORE_ISSUER_ID=$(op read "op://end.works/App Store Connect API/app store issuer id")
          export IOS_EXPORT_PRODUCTION=$(op read "op://end.works/App Store Connect API/ios export production")
          export IOS_PROD_CERTIFICATE=$(op read "op://end.works/App Store Connect API/ios prod certificate")
          export IOS_PROD_CERTIFICATE_PASSWORD=$(op read "op://end.works/App Store Connect API/ios prod certificate password")
          export IOS_PROVISION_PRODUCTION=$(op read "op://end.works/App Store Connect API/ios provision production")
          echo "APPSTORE_API_KEY_ID=$APPSTORE_API_KEY_ID" >> $GITHUB_ENV
          echo "APPSTORE_API_PRIVATE_KEY=$APPSTORE_API_PRIVATE_KEY" >> $GITHUB_ENV
          echo "APPSTORE_ISSUER_ID=$APPSTORE_ISSUER_ID" >> $GITHUB_ENV
          echo "IOS_EXPORT_PRODUCTION=$IOS_EXPORT_PRODUCTION" >> $GITHUB_ENV
          echo "IOS_PROD_CERTIFICATE=$IOS_PROD_CERTIFICATE" >> $GITHUB_ENV
          echo "IOS_PROD_CERTIFICATE_PASSWORD=$IOS_PROD_CERTIFICATE_PASSWORD" >> $GITHUB_ENV
          echo "IOS_PROVISION_PRODUCTION=$IOS_PROVISION_PRODUCTION" >> $GITHUB_ENV
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Get release name
        run: |
          echo "BUILD_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "BUILD_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$(git rev-list --count main)" >> $GITHUB_ENV

      - name: Build iOS app
        run: flutter build ipa --release --build-number=${{ env.BUILD_NUMBER }} --obfuscate --split-debug-info=out/ios/ --no-codesign --export-method ad-hoc

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          path: build/ios/ipa/*.ipa

      # - name: Build iOS ipa
      #   run: flutter build ipa --release --build-number=${{ env.BUILD_NUMBER }} --obfuscate --split-debug-info=out/ios/

      # - name: Install the Apple certificate and provisioning profile
      #   env:
      #     BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      #     P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      #     BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
      #     KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      #   run: |
      #     # create variables
      #     CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
      #     PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
      #     KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

      #     # import certificate and provisioning profile from secrets
      #     echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
      #     echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

      #     # create temporary keychain
      #     security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      #     security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      #     # import certificate to keychain
      #     security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      #     security list-keychain -d user -s $KEYCHAIN_PATH

      #     # apply provisioning profile
      #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      #     cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      # - run: xcrun altool --validate-app -f build/ios/ipa/*.ipa --type ios --apiKey ${{ secrets.APPSTORE_API_KEY_ID }} --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID }}
      # - run: xcrun altool --upload-app -f build/ios/ipa/*.ipa --type ios --apiKey ${{ secrets.APPSTORE_API_KEY_ID }} --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID }}
