name: iOS

on:
  push:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Flutter setup
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          architecture: x64
          cache: true

      - name: Load secret
        id: op-load-secret
        uses: 1password/load-secrets-action@v1.2.0
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          APPSTORE_API_KEY_ID: op://end.works/App Store/app store api key id
          APPSTORE_API_PRIVATE_KEY_BASE64: op://end.works/App Store/app store api private key
          APPSTORE_ISSUER_ID: op://end.works/App Store/app store issuer id
          BUILD_CERTIFICATE_BASE64: op://end.works/App Store/build certificate
          P12_PASSWORD: op://end.works/App Store/p12 password
          BUILD_PROVISION_PROFILE_BASE64: op://end.works/App Store/build provision profile
          KEYCHAIN_PASSWORD: op://end.works/App Store/keychain password
          CODE_SIGNING_IDENTITY: op://end.works/App Store/code signing identity
          TEAM_ID: op://end.works/App Store/team id

      - name: Get release name
        run: |
          echo "COMMIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "COMMIT_NUMBER=$(git rev-list --count main)" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$(git log -1 --pretty=%B)" >> $GITHUB_ENV

      - name: Install the Codemagic CLI tools
        run: pip3 install codemagic-cli-tools

      - name: Set the environment variables
        run: |
          echo "APP_STORE_CONNECT_ISSUER_ID=${{ env.APPSTORE_ISSUER_ID }}" >> $GITHUB_ENV
          echo "APP_STORE_CONNECT_KEY_IDENTIFIER=${{ env.APPSTORE_API_KEY_ID }}" >> $GITHUB_ENV
          echo "CERTIFICATE_PRIVATE_KEY_PASSWORD=${{ env.P12_PASSWORD }}" >> $GITHUB_ENV

      - name: Import api key
        run: |
          mkdir -p ~/.appstoreconnect/private_keys
          echo -n "${{ env.APPSTORE_API_PRIVATE_KEY_BASE64 }}" | base64 --decode -o ~/.appstoreconnect/private_keys/AuthKey.p8

      - name: Generate iOS Distribution certificate
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          CERTIFICATE_KEY_PATH=$RUNNER_TEMP/cert_key
          echo -n "${{ env.BUILD_CERTIFICATE_BASE64 }}" | base64 --decode -o $CERTIFICATE_PATH
          openssl pkcs12 -in $CERTIFICATE_PATH -nodes -nocerts -password pass:'${{ env.P12_PASSWORD }}' | openssl rsa -out $CERTIFICATE_KEY_PATH
          echo "CERTIFICATE_PRIVATE_KEY=$(<$CERTIFICATE_KEY_PATH)" >> $GITHUB_ENV

      - name: Set up a new temporary keychain
        run: keychain initialize

      - name: Restore Login Keychain
        run: keychain use-login

      - name: Fetch the code signing files from App Store Connect
        run: app-store-connect fetch-signing-files $(xcode-project detect-bundle-id) --type IOS_APP_STORE --create

      - name: Add the fetched certificates to keychain
        run: keychain add-certificates

      - name: Update the Xcode project settings to use fetched code signing profiles
        run: xcode-project use-profiles

      - name: Install Flutter dependencies
        run: flutter packages pub get

      - name: Install CocoaPods dependencies
        run: find . -name "Podfile" -execdir pod install \;

      - name: Build the Flutter the iOS project
        run: flutter build ipa --release --export-options-plist=$HOME/export_options.plist

      - run: cat export_options.plist

      - name: Publish the app to App Store Connect
        run: app-store-connect publish --path $(find $(pwd) -name "*.ipa")

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          path: $(find $(pwd) -name "*.ipa")

      # - name: Install the Apple certificate and provisioning profile
      #   run: |
      #     # create variables
      #     CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
      #     PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
      #     KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
      #     API_KEY_PATH=$RUNNER_TEMP/AuthKey.p8

      #     # import certificate and provisioning profile from secrets
      #     echo -n "${{ env.BUILD_CERTIFICATE_BASE64 }}" | base64 --decode -o $CERTIFICATE_PATH
      #     echo -n "${{ env.BUILD_PROVISION_PROFILE_BASE64 }}" | base64 --decode -o $PP_PATH
      #     echo -n "${{ env.APPSTORE_API_PRIVATE_KEY_BASE64 }}" | base64 --decode -o $API_KEY_PATH

      #     # create temporary keychain
      #     security create-keychain -p "${{ env.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
      #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      #     security unlock-keychain -p "${{ env.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH

      #     # import certificate to keychain
      #     security import $CERTIFICATE_PATH -P "${{ env.P12_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      #     security list-keychain -d user -s $KEYCHAIN_PATH

      #     # apply provisioning profile
      #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      #     cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      #     # apply api key
      #     mkdir -p ~/.private_keys
      #     cp $API_KEY_PATH ~/.private_keys

      # - name: Build ad hoc app
      #   run: flutter build ipa --release --build-number=${{ env.COMMIT_NUMBER }} --obfuscate --split-debug-info=out/ios/ --export-method ad-hoc --verbose

      # - name: Upload artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     path: build/ios/ipa/*.ipa

      # - name: Build app-store app
      #   run: flutter build ipa --release --build-number=${{ env.COMMIT_NUMBER }} --obfuscate --split-debug-info=out/ios/ --verbose

      # - name: Validate app
      #   run: xcrun altool --validate-app -f build/ios/ipa/*.ipa --type ios --apiKey ${{ env.APPSTORE_API_KEY_ID }} --apiIssuer ${{ env.APPSTORE_ISSUER_ID }}

      # - name: Publish app
      #   run: xcrun altool --upload-app -f build/ios/ipa/*.ipa --type ios --apiKey ${{ env.APPSTORE_API_KEY_ID }} --apiIssuer ${{ env.APPSTORE_ISSUER_ID }}
